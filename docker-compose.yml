
services:
  redis:
    container_name: redis
    image: redis:latest
    volumes:
      - ./redis:/data
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    networks:
      - mynetwork
    depends_on:
      backend:
        condition: service_healthy
  
  # frontend:
  #   container_name: frontend
  #   build: ./frontend
  #   ports:
  #     - "3000:3000"
  #   volumes:
  #     - ./frontend:/app
  #   networks:
  #     - mynetwork
  #   depends_on:
  #     backend:
  #       condition: service_healthy
      
  backend:
    container_name: backend
    build: ./backend
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - ./infrastructure/logs/backend:/var/log/backend
    restart: always
    networks:
      - mynetwork
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "manage.py", "check"]
      interval: 10s
      timeout: 5s
      retries: 5

  db:
    container_name: database
    image: postgres:16-bullseye
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ./database:/var/lib/postgresql/data
      - ./infrastructure/logs/database:/var/log/postgresql
      - ./infrastructure/postgresql.conf:/var/lib/postgresql/data/postgresql.conf
    networks:
      - mynetwork
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5


networks:
  mynetwork:
    driver: bridge

